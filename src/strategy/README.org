* Duck
** Class Diagram
[[file:design/duck.png]]

* Strategy Pattern
- The strategy pattern defines a family of algorithms, encapsulates each one, and makes them *interchangeable*
- Strategy lets the algorithm vary *independently from clients* that use it
* Design principle
** Identify the aspects of your application that vary and separate them from what stays the same
- *Take the parts that vary and encapsulate them*, so that later you can alter or extend the parts that vary without affecting those that don't
- If you've got some aspect of your code that is changing, say with every new requirement, then you know you've got a behavior that needs to be *pulled out and separated* from all the stuff that doesn't change
** Program to interface, not an implementation
[[file:static/images/program_to_interface.png]]

** Favor composition over inheritance
- Create system using composition gives you a lot more flexibility. Not only does it let you encapsulate a family of algorithm into their own set of classes, but it also let you *change behavior at the runtime* as long as the object you're composing with implements the correct behavior interface
